{"version":3,"sources":["components/preview/preview.jsx","components/textEditor/editor.jsx","service/default_text.js","App.js","reportWebVitals.js","index.js"],"names":["Preview","props","text","max","marked","setOptions","breaks","editorWingth","id","style","display","dangerouslySetInnerHTML","__html","Editor","get","set","setMax","width","className","src","alt","onClick","e","name","value","onChange","target","defaultText","parseInline","App","useState","HTMLtext","setHTMLtext","maximaized","setMaximaized","useEffect","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAuBeA,MApBf,SAAiBC,GACf,IAAQC,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,IAEdC,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAeJ,EAAM,OAAS,QAEpC,OACE,sBAAKK,GAAG,cAAcC,MAAO,CAAEC,QAASH,GAAxC,UACE,yCACA,qBACEC,GAAG,UACHG,wBAAyB,CAAEC,OAAQR,IAAOF,UC4BnCW,MA1Cf,SAAgBZ,GAEd,IAAQa,EAA0Bb,EAA1Ba,IAAKC,EAAqBd,EAArBc,IAAKZ,EAAgBF,EAAhBE,IAAKa,EAAWf,EAAXe,OAEjBT,EAAeJ,EAAM,OAAS,MAEpC,OACE,sBAAKK,GAAG,aAAaC,MAAO,CAAEQ,MAAOV,GAArC,UACE,sBAAKW,UAAU,SAAf,UACE,uBACA,wCACA,qBACEC,IAAG,wBAAmBhB,EAAM,MAAQ,MAAjC,QACHiB,IAAI,WACJC,QAAS,SAACC,GACRN,GAAQb,SAId,0BACEoB,KAAK,SACLf,GAAG,SAEHU,UAAS,iBAAYf,EAAM,aAAe,cAE1CqB,MAAOV,EACPW,SAAU,SAACH,GAETP,EAAIO,EAAEI,OAAOF,UAGjB,wBACEH,QAAS,WACPN,EAAI,KAFR,uBCdOY,GAHKvB,IAAO,mBACNA,IAAOwB,YAAY,mBAEd,yFAMtB,MANsB,yJAWtB,MAXsB,26BCYTC,MAzBf,WACE,MAAgCC,mBAAS,gBAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAMA,OAJAC,qBAAU,WACRH,EAAYL,KACX,IAGD,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,CACEJ,IAAKiB,EACLhB,IAAK,SAACqB,GACJJ,EAAYI,IAEdjC,IAAK8B,EACLjB,OAAQ,SAACM,GACPY,EAAcZ,MAGlB,cAAC,EAAD,CAASpB,KAAM6B,EAAU5B,IAAK8B,QCfrBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9dcfb9f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport marked from \"marked\";\r\n\r\nfunction Preview(props) {\r\n  const { text, max } = props;\r\n\r\n  marked.setOptions({\r\n    breaks: true,\r\n  });\r\n\r\n  const editorWingth = max ? \"none\" : \"block\";\r\n\r\n  return (\r\n    <div id=\"preview_div\" style={{ display: editorWingth }}>\r\n      <h3>Preview</h3>\r\n      <div\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: marked(text) }}\r\n      ></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\n// import Text from \"../../service/default_text.txt\";\r\n\r\nfunction Editor(props) {\r\n  //   const [HTMLtext, setHTMLtext] = useState(\"loading .. ..\");\r\n  const { get, set, max, setMax } = props;\r\n  //   const [maximaized, setMaximaized] = useState(false);\r\n  const editorWingth = max ? \"100%\" : \"35%\";\r\n\r\n  return (\r\n    <div id=\"editor_div\" style={{ width: editorWingth }}>\r\n      <div className=\"header\">\r\n        <h3></h3>\r\n        <h3>Editor</h3>\r\n        <img\r\n          src={`/images/icons/${max ? \"min\" : \"max\"}.png`}\r\n          alt=\"maximize\"\r\n          onClick={(e) => {\r\n            setMax(!max);\r\n          }}\r\n        />\r\n      </div>\r\n      <textarea\r\n        name=\"editor\"\r\n        id=\"editor\"\r\n        // className=\"editor-min\"\r\n        className={`editor ${max ? \"editor-max\" : \"editor-min\"}`}\r\n        // defaultValue={get}\r\n        value={get}\r\n        onChange={(e) => {\r\n          //   console.log(e.target.value);\r\n          set(e.target.value);\r\n        }}\r\n      ></textarea>\r\n      <button\r\n        onClick={() => {\r\n          set(\"\");\r\n        }}\r\n      >\r\n        clear\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import marked from \"marked\";\r\n\r\n// const renderer = {\r\n//   heading(text, level) {\r\n//     const escapedText = text.toLowerCase().replace(/[^\\w]+/g, \"-\");\r\n\r\n//     return `\r\n//             <h${level}>\r\n//               <a name=\"${escapedText}\" class=\"anchor\" href=\"#${escapedText}\">\r\n//                 <span class=\"header-link\"></span>\r\n//               </a>\r\n//               ${text}\r\n//             </h${level}>`;\r\n//   },\r\n// };\r\n\r\n// marked.use({ renderer });\r\nconst blockHtml = marked(\"**strong** _em_\");\r\nconst inlineHtml = marked.parseInline(\"**strong** _em_\");\r\n\r\nexport const defaultText = `\r\n# Welcome to shaysel's React Markdown Previewer!\r\n## Shaysel's Editor\r\n\r\n\r\n\r\n${\"```\"}\r\n// this is multi-line code:\r\nHeres some code, '<div></div>', between 2 backticks.\r\n\r\n<code>function anotherExample(firstLine, lastLine) {}}</code>\r\n${\"```\"}\r\n\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\n\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nHere's a link to [my github for more projects](https://github.com/shaytamir).\r\n\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n\r\n\r\n- And of course there are lists.\r\n- Some are bulleted.\r\n- With different indentation levels.\r\n- That look like this.\r\nI think you should use an \\`<addr>\\` element here instead.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\nOh and not forgeting quotes:\r\n> Dorothy followed her through many of the beautiful rooms in her castle.\r\n\r\n![Markdown Logo](/images/earth.png)\r\n`;\r\n","import \"./App.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nimport Preview from \"./components/preview/preview\";\nimport Editor from \"./components/textEditor/editor\";\nimport { defaultText } from \"./service/default_text.js\";\n\nfunction App() {\n  const [HTMLtext, setHTMLtext] = useState(\"loading.. ..\");\n  const [maximaized, setMaximaized] = useState(false);\n\n  useEffect(() => {\n    setHTMLtext(defaultText);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Editor\n        get={HTMLtext}\n        set={(content) => {\n          setHTMLtext(content);\n        }}\n        max={maximaized}\n        setMax={(e) => {\n          setMaximaized(e);\n        }}\n      />\n      <Preview text={HTMLtext} max={maximaized} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}